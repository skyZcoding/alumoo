// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using alumoo.Backend.Core.Database;

#nullable disable

namespace alumoo.Backend.Core.Database.Configurations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220917181515_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.ImpressionEntity", b =>
                {
                    b.Property<int>("ImpressionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImpressionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int>("VolunteerId")
                        .HasColumnType("integer");

                    b.HasKey("ImpressionId");

                    b.HasIndex("TaskId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("Impressions");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.ProjectEntity", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProjectId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.TaskEntity", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HoursPerWeek")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NoOfVolunteers")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TaskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.VolunteerEntity", b =>
                {
                    b.Property<int>("VolunteerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VolunteerId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("VolunteerId");

                    b.HasIndex("UserId");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("ProjectEntityVolunteerEntity", b =>
                {
                    b.Property<int>("FavoritProjectsProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("FollowersVolunteerId")
                        .HasColumnType("integer");

                    b.HasKey("FavoritProjectsProjectId", "FollowersVolunteerId");

                    b.HasIndex("FollowersVolunteerId");

                    b.ToTable("ProjectEntityVolunteerEntity");
                });

            modelBuilder.Entity("TaskEntityVolunteerEntity", b =>
                {
                    b.Property<int>("TasksTaskId")
                        .HasColumnType("integer");

                    b.Property<int>("VolunteersVolunteerId")
                        .HasColumnType("integer");

                    b.HasKey("TasksTaskId", "VolunteersVolunteerId");

                    b.HasIndex("VolunteersVolunteerId");

                    b.ToTable("TaskEntityVolunteerEntity");
                });

            modelBuilder.Entity("TaskEntityVolunteerEntity1", b =>
                {
                    b.Property<int>("ApplicantsVolunteerId")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicationsTaskId")
                        .HasColumnType("integer");

                    b.HasKey("ApplicantsVolunteerId", "ApplicationsTaskId");

                    b.HasIndex("ApplicationsTaskId");

                    b.ToTable("TaskEntityVolunteerEntity1");
                });

            modelBuilder.Entity("TaskEntityVolunteerEntity2", b =>
                {
                    b.Property<int>("FavoritTasksTaskId")
                        .HasColumnType("integer");

                    b.Property<int>("FollowersVolunteerId")
                        .HasColumnType("integer");

                    b.HasKey("FavoritTasksTaskId", "FollowersVolunteerId");

                    b.HasIndex("FollowersVolunteerId");

                    b.ToTable("TaskEntityVolunteerEntity2");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.ImpressionEntity", b =>
                {
                    b.HasOne("alumoo.Backend.Core.Database.Entities.TaskEntity", "Task")
                        .WithMany("Impressions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("alumoo.Backend.Core.Database.Entities.VolunteerEntity", "Volunteer")
                        .WithMany("Impressions")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.ProjectEntity", b =>
                {
                    b.HasOne("alumoo.Backend.Core.Database.Entities.UserEntity", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.TaskEntity", b =>
                {
                    b.HasOne("alumoo.Backend.Core.Database.Entities.ProjectEntity", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.VolunteerEntity", b =>
                {
                    b.HasOne("alumoo.Backend.Core.Database.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectEntityVolunteerEntity", b =>
                {
                    b.HasOne("alumoo.Backend.Core.Database.Entities.ProjectEntity", null)
                        .WithMany()
                        .HasForeignKey("FavoritProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("alumoo.Backend.Core.Database.Entities.VolunteerEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersVolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskEntityVolunteerEntity", b =>
                {
                    b.HasOne("alumoo.Backend.Core.Database.Entities.TaskEntity", null)
                        .WithMany()
                        .HasForeignKey("TasksTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("alumoo.Backend.Core.Database.Entities.VolunteerEntity", null)
                        .WithMany()
                        .HasForeignKey("VolunteersVolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskEntityVolunteerEntity1", b =>
                {
                    b.HasOne("alumoo.Backend.Core.Database.Entities.VolunteerEntity", null)
                        .WithMany()
                        .HasForeignKey("ApplicantsVolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("alumoo.Backend.Core.Database.Entities.TaskEntity", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskEntityVolunteerEntity2", b =>
                {
                    b.HasOne("alumoo.Backend.Core.Database.Entities.TaskEntity", null)
                        .WithMany()
                        .HasForeignKey("FavoritTasksTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("alumoo.Backend.Core.Database.Entities.VolunteerEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersVolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.ProjectEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.TaskEntity", b =>
                {
                    b.Navigation("Impressions");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.UserEntity", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("alumoo.Backend.Core.Database.Entities.VolunteerEntity", b =>
                {
                    b.Navigation("Impressions");
                });
#pragma warning restore 612, 618
        }
    }
}
